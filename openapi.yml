openapi: 3.0.0
info:
  title: QuickCHAT
  description: RESTful chat service.
  version: 1.0.0
  license:
    name: BSD-3-Clause
#servers:
#  - url: https://api.qc.foxdogcoon.me/

paths:
  /user:
    post:
      tags:
        - Users
      summary: "Creates new user."
      #description: ""
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthenticationData'
      responses:
        "200":
          description: A JSON object with session token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
        "400":
          $ref: '#/components/responses/ExecutionError'
    get:
      tags:
        - Users
      summary: "Retrives current user information."
      security: 
        - Auth: []
      responses:
        "200":
          description: A JSON object with requested information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    patch:
      tags:
        - Users
      summary: "Updates user information."
      security: 
        - Auth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: RegularUser
                first_name:
                  type: string
                  example: John
                last_name:
                  type: string
                  example: Johnson
                bio:
                  type: string
                  example: 23 yo. designer from San Francisco
                profile_picture:
                  type: string
                  format: uuid
      responses:
        "200":
          description: A JSON object with updated user information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "400":
          $ref: '#/components/responses/ExecutionError'
    delete:
      tags:
        - Users
      summary: "Removes current user."
      security: 
        - Auth: []
      parameters:
        - name: password
          in: query
          description: User's password
          schema:
            type: string
      responses:
        "200":
          description: Empty body.
        "400":
          $ref: '#/components/responses/ExecutionError'
  /user/{username}:
    get:
      tags:
        - Users
      summary: "Retrieves user information."
      security: 
        - Auth: []
      parameters: 
        - name: username
          in: path
          description: Username of user to return information.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: A JSON object with requested information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "400":
          $ref: '#/components/responses/ExecutionError'
          
  /session:
    post:
      tags:
        - Sessions
      summary: "Authorizes user and creates session."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SessionAuthenticationData'
      responses:
        "200":
          description: "A JSON object with session token."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
        "400":
          $ref: '#/components/responses/ExecutionError'
    get:
      tags:
        - Sessions
      summary: "Retrieves list of all active sessions."
      security:
        - Auth: []
      responses:
        "200":
          description: "A JSON array with active sessions."
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      format: uuid
                    platform:
                      type: string
                      example: Windows
                    client:
                      type: string
                      example: Official QuickCHAT client
                    auth_time:
                      type: integer
                    ip:
                      type: string
                      example: 127.0.0.1
    delete:  
      tags:
        - Sessions
      summary: "Revoke current session."
      security:
        - Auth: []
      responses:
        "200":
          description: "Empty body"
  /session/{id}:
    delete:
      tags:
        - Sessions
      summary: "Revoke specified session."
      security:
        - Auth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: "Empty body"
        "400":
          $ref: '#/components/responses/ExecutionError'
    
  /message:
    post:
      tags:
        - Messages
      summary: "Sends a message."
      security:
        - Auth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                recipient:
                  type: string
                  format: uuid
                message:
                  type: string
                  example: "Hey!"
                reply_to:
                  type: string
                  format: uuid
      responses:
        "200":
          description: "A JSON object with sent message UUID and date."
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                  time:
                    type: integer
                    format: timestamp
        "400":
          $ref: '#/components/responses/ExecutionError'
    get:
      tags:
        - Messages
      summary: "Retrieves messages."
      security:
        - Auth: []
      parameters:
        - in: query
          name: user_id
          schema:
            type: string
            format: uuid
          description: Retrieve messages only from certain user.
          required: false
        - in: query
          name: limit
          required: false
          schema:
            type: integer
            format: int64
          description: Limit amount of messages to retrieve.
        - in: query
          name: offset
          required: false
          schema:
            type: integer
            format: int64
          description: Skip some messages.
      responses:
        "200":
          description: "Array of messages."
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Message'
        "400":
          $ref: '#/components/responses/ExecutionError'
  /message/{id}:
    get:
      tags:
        - Messages
      summary: "Retrieves specific message."
      security:
        - Auth: []
      parameters:
        - in: path
          name: id
          required: true
          description: UUID of message.
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: "One message."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
        "400":
          $ref: '#/components/responses/ExecutionError'
    patch:
      tags:
        - Messages
      summary: "Edits sent message."
      security:
        - Auth: []
      parameters:
        - name: id
          in: path
          required: true
          description: UUID of sent message
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                  example: "Heyo!"
      responses:
        "200":
          description: "Empty body."
        "400":
          $ref: '#/components/responses/ExecutionError'
    delete:
      tags:
        - Messages
      summary: "Removes sent message."
      security:
        - Auth: []
      parameters:
        - name: id
          in: path
          required: true
          description: UUID of sent message
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: "Empty body."
        "400":
          $ref: '#/components/responses/ExecutionError'
          
  /status/online:
    patch:
      tags:
        - Statuses
      summary: "Updates online status of current user."
      security:
        - Auth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                online:
                  type: boolean
      responses:
        "200":
          description: "Empty body."
  /status/updates:
    get:
      tags:
        - Statuses
      summary: "Retrieves updates from timestamp to current time."
      security:
        - Auth: []
      parameters:
        - name: "timestamp"
          schema:
            type: integer
            format: int64
          in: "query"
          required: true
      responses:
        "200":
          description: "Array of messages."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Updates'
        "400":
          $ref: '#/components/responses/ExecutionError'
      
components:
  schemas:
    AuthenticationData:
      type: object
      properties:
        username:
          type: string
          example: RegularUser
        password:
          type: string
          format: password
          example: P@ssw0rd
    Token:
      type: object
      properties:
        token:
          type: string
          example: "jx9Pkv/ac8v/bwUwQh5qWnbSeJ1CoG9ovgty9pKoK2w="
    Error:
      type: object
      properties:
        error_code:
          type: string
          example: "INCORRECT_PASSWORD"
        description:
          type: string
          description: Human-readable error description
          example: "Entered password is incorrect."
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        username:
          type: string
          example: RegularUser
        first_name:
          type: string
          example: John
        last_name:
          type: string
          example: Johnson
        bio:
          type: string
          example: 23 yo. designer from San Francisco
        online:
          type: boolean
        profile_picture:
          type: string
          format: uuid
    SessionAuthenticationData:
      type: object
      properties:
        username:
          type: string
          example: RegularUser
        password:
          type: string
          format: password
          example: P@ssw0rd
        platform:
          type: string
          example: Windows
        client:
          type: string
          example: Official QuickCHAT client
    Message:
      type: object
      properties:
        sender:
          type: string
          format: uuid
        recipient:
          type: string
          format: uuid
        message:
          type: string
          example: "Hey!"
        reply_to:
          type: string
          format: uuid
        sent_at:
          type: integer
          format: timestamp
    Updates:
      type: array
      items:
        type: object
        properties:
          recipient:
            type: string
            format: uuid
          message:
            type: string
            example: "Hey!"
          reply_to:
            type: string
            format: uuid
          sent_at:
            type: integer
            format: timestamp
      
  responses:
    ExecutionError:
      description: A JSON object with error information.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    


